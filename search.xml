<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>My-java-06</title>
      <link href="/posts/3.html"/>
      <url>/posts/3.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://www.jinqiaojob.com/uploads/allimg/200116/1-200116214R1611.jpg" alt="Java06"></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组就是⼀种可以存储⼤量数据类型相同的变量的数据结构，数组就是⼀个具有相同数据类型的数据集<br>合。<br>数组中的数据必须是同⼀种数据类型的。</p><ul><li>数组的基本要素</li><li>数组名称</li><li>数组元素</li><li>元素下标<br>数据类型<br>数组本身就是⼀个变量，数组名称就是变量名，数组中保存的每⼀个数据都会有⼀个下标（从 0开始）</li></ul><pre><code>//给数组赋值array[0] = 1;array[1] = 2;array[2] = 3;array[3] = 4;array[4] = 5;array[5] = 6;int[] array2 = {1,2,3,4,5,6};int[] array3 = new int[]{1,2,3,4,5,6};</code></pre><h3 id="数组常⻅的错误"><a href="#数组常⻅的错误" class="headerlink" title="数组常⻅的错误"></a>数组常⻅的错误</h3><ul><li>数据类型不匹配。  </li><li>边声明边赋值的⽅式，代码必须写在同⼀⾏，不能换⾏。  </li><li>数组下标越界。  <h3 id="数组的常⽤操作及⽅法"><a href="#数组的常⽤操作及⽅法" class="headerlink" title="数组的常⽤操作及⽅法"></a>数组的常⽤操作及⽅法</h3></li><li>求数组的最⼤值  </li><li>求数组的最⼩值  </li><li>在数组的指定位置插⼊数据  </li><li>对数组进⾏排序</li></ul><h3 id="⼆维数组"><a href="#⼆维数组" class="headerlink" title="⼆维数组"></a>⼆维数组</h3><p>⼆维数组简单理解即⼀维数组中保存的值是另外⼀个⼀维数组。<br>变量、数据类型、流程控制、循环、数组。<br>⽤户管理系统  </p><ul><li>查询⽤户：将系统中保存的全部⽤户信息在控制台打印输出。  </li><li>添加⽤户：向系统中添加新的⽤户信息，如果添加的⽤户已经存在，给出提示信息。</li><li>删除⽤户：输⼊⽤户名，进⾏删除操作，若输⼊的⽤户名不存在，给出提示信息。</li><li>账号冻结：输⼊⽤户名，进⾏冻结操作，若输⼊的⽤户名不存在或者该⽤户已经被冻结，给出相应<br>提示。  </li><li>账号解冻：输⼊⽤户名，进⾏解封操作，若输⼊的⽤户名不存在或者该⽤户状态正常，给出相应提<br>示。  </li><li>退出系统：跳出循环，给出提示信息。  </li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My-Java-05</title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://www.jinqiaojob.com/uploads/allimg/200116/1-200116214R1611.jpg" alt="Java05"></p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul><li>switch-case<br>与 if 不同的是，switch-case 只能完成等值判断，⽽⽆法完成判断⼤⼩。  </li></ul><p>如果是判断两个值是否相等，可以使⽤ switch-case，如果⽐较两个值的⼤⼩关系，则不能使⽤ switch-case。  </p><p>switch ⽀持 int、short、byte、char、枚举、String 类型，不⽀持 boolean 类型。  </p><p>基本语法  </p><pre><code>switch(变量){ case 值1: //业务代码 break； case 值2: //业务代码 breka; ... default: //业务代码 break; }</code></pre><p>case 判断变量是否等于某个值，default 表示所有的 case 都不成⽴的情况下所执⾏的代码。  </p><ul><li>1 奖励 2000</li><li>2 奖励 1000</li><li>3 奖励 500</li><li>否则没有奖励  </li></ul><pre><code>public static void main(String[] args) { int placing = 1; if(placing == 1) { System.out.println(&quot;奖励2000元&quot;); }else { if(placing == 2) { System.out.println(&quot;奖励1000元&quot;); }else { if(placing == 3) { System.out.println(&quot;奖励500元&quot;); }else{ System.out.println(&quot;没有奖励&quot;);     }   } } switch(placing) { case 1:   System.out.println(&quot;奖励2000元&quot;); break; case 2:   System.out.println(&quot;奖励1000元&quot;); break; case 3:   System.out.println(&quot;奖励500元&quot;); break; default:   System.out.println(&quot;没有奖励&quot;); break;  }} </code></pre><h3 id="循环-1"><a href="#循环-1" class="headerlink" title="循环  1"></a>循环  1</h3><p>for、while、do-while、foreach  </p><p>循环四要素：  </p><ul><li>初始化循环变量  </li><li>循环条件  </li><li>循环体  </li><li>更新循环变量  </li></ul><p>while</p><pre><code>初始化循环变量while(循环条件){ 循环体 更新循环变量}</code></pre><pre><code>//初始化循环变量int num = 0;//循环条件while(num &lt; 10) { //循环体 System.out.println(&quot;Hello World&quot;); //更新循环变量 num++; }</code></pre><pre><code> int num = 0; String flag = &quot;y&quot;; while(flag.equals(&quot;y&quot;)) {   System.out.print(&quot;请输⼊学⽣学号：&quot;);   Scanner scanner = new Scanner(System.in);   int id = scanner.nextInt();   switch(id) {      case 1:        System.out.println(&quot;张三的成绩是96&quot;);        break;     case 2:        System.out.println(&quot;李四的成绩是91&quot;);        break;      case 3:        System.out.println(&quot;王五的成绩是89&quot;);        break;    default:        System.out.println(&quot;请输⼊正确的学号&quot;);        break; }   System.out.print(&quot;是否继续？y/n&quot;);   flag = scanner.next();} System.out.println(&quot;感谢使⽤学⽣成绩查询系统&quot;);</code></pre><p>do-while  </p><pre><code>//初始化循环变量int num = 0;do { //循环体 System.out.println(&quot;Hello World&quot;); //更新循环变量 num++; }while(num&lt;10);//循环条件</code></pre><pre><code>Scanner scanner = new Scanner(System.in);String result = &quot;&quot;;do { System.out.println(&quot;张三参加体能测试，跑1000⽶&quot;); System.out.print(&quot;是否合格？y/n&quot;); result = scanner.next();}while(result.equals(&quot;n&quot;));System.out.println(&quot;合格，通过测试&quot;);</code></pre><p>for  </p><pre><code>for(初始化循环变量;循环条件;更新循环变量){ 循环体}</code></pre><pre><code>for(int num = 0;num &lt; 10;num++) { System.out.println(&quot;Hello World&quot;);}</code></pre><p>while、do-while、for 3种循环的区别  </p><ul><li>相同点：都遵循循环四要素，初始化循环变量、循环条件、循环体、更新循环变量。</li><li>不同点：<ul><li>while 和 do-while 适⽤于循环次数不确定的业务场景；for 适⽤于循环次数确定的场景。  <ul><li>while 和 for 都是先判断循环条件，再执⾏循环体；do-while 先执⾏循环体，再判断循环条<br>件。  </li></ul></li></ul></li></ul><p>分别使⽤ while、do-while、for 循环输出 10 以内的所有奇数。  </p><pre><code>//while循环int num = 0;while(num &lt;= 10) { if(num%2!=0) {   System.out.println(num); } num++; }//do-while循环int num = 0;do { if(num%2!=0) {   System.out.println(num); } num++; }while(num &lt;= 10);//for循环for(int num = 0;num &lt;= 10;num++) { if(num%2!=0) {   System.out.println(num); }}</code></pre><p>for 循环只适⽤于循环次数确定的场景下(for 也可以适⽤于循环次数不确定的场景，只不过⼀般不会⽤<br>这种⽅式进⾏开发)，while 和 do-while 循环次数确定或者不确定都可以使⽤。</p><pre><code>String result = &quot;n&quot;;for(;result.equals(&quot;n&quot;);) { System.out.println(&quot;张三参加体能测试，跑1000⽶&quot;); System.out.print(&quot;是否合格？y/n&quot;); result = scanner.next();}System.out.println(&quot;合格，通过测试&quot;);</code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My-Java-04</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://www.jinqiaojob.com/uploads/allimg/200116/1-200116214R1611.jpg" alt="Java04"></p><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p>三元运算符、三⽬运算符、三元表达式<br>根据不同的条件给同⼀个变量赋不同的值，变量 = 条件?值1:值2.</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li>⼗进制和⼆进制的转换  </li></ul><p>⼗进制转⼆进制：⽬标数除以2，若能除尽，该位记做0，若除不尽，该位记做1，再对商继续除以2，以<br>此类推，直到商为0，然后把每⼀位的结果反序组合就是对应的⼆进制。  </p><p>10：1010  </p><p>17：10001  </p><p>⼆进制转⼗进制：从⽬标数的最后侧起，本位的数值乘以本位的权重，权重就是2的第⼏位的位数减⼀<br>次⽅，将每⼀位的值进⾏相加，得到的结果就是对应的⼗进制。  </p><p>位运算符：&amp;（按位与）、｜（按位或）、^（按位异或）、&lt;&lt;（左移）、&gt;&gt;（右移）</p><p>变量1 &amp; 变量2：先把变量 1 和变量 2 转为⼆进制，每⼀位的数字⼀⼀对应，进⾏⽐较判断，若都为<br>1，则该位记做 1，否则记做 0。  </p><p>变量1 ｜ 变量2：先把变量 1 和变量 2 转为⼆进制，每⼀位的数字⼀⼀对应，进⾏⽐较判断，只要有⼀<br>个为 1，则该位记做 1，否则记做 0。  </p><p>变量1 ^ 变量2：先把变量 1 和变量 2 转为⼆进制，每⼀位的数字⼀⼀对应，进⾏⽐较判断，相同记做<br>0，不同记做 1。</p><p>变量1 &lt;&lt; 变量2：变量1乘以2的变量2次⽅<br>2 &lt;&lt; 3 : 2 * 8 = 16<br>变量1 &gt;&gt; 变量2：变量1除以2的变量2次⽅<br>2 &gt;&gt; 3：2/8 = 0  </p><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><p>!&gt;算术运算符&gt;关系运算符&gt;逻辑运算符(&amp;&amp;&gt;||)   </p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul><li>if else<br>⽤来判断某个条件是否成⽴，然后执⾏不同的逻辑运算。<br>基本语法：  </li></ul><pre><code>if(判断条件){ //条件成⽴的代码}else{ //条件不成⽴的代码}</code></pre><ul><li>多重 if</li></ul><p>173 M<br>173～178 L<br>178 XL  </p><ul><li>if 后⾯必须跟条件</li><li>else 后⾯不能跟条件</li><li>else 后⾯可以根据{}，也可以跟 if</li></ul><p>$$ a^2-b^2=(a+b)(a-b) $$</p><p>n<sup>2</sup>=n+1<br>a=log<sub>2</sub>b</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Java 03</title>
      <link href="/posts/63998.html"/>
      <url>/posts/63998.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://www.jinqiaojob.com/uploads/allimg/200116/1-200116214R1611.jpg" alt="Java03"></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>数据类型</li><li>变量名</li><li>变量值<br>基本数据类型+引⽤数据类型  </li></ul><p>数值类型：byte 1个字节、int 4个字节、short 2个字节、long 8个字节、float 4个字节、double 8个字节<br>⾮数值类型：char 2个字节、boolean 1/8个字节</p><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul><li>⾃动转换<br>Java 可以⾃动对某些数据类型进⾏⾃动转换。<br>规则：只能由低字节向⾼字节进⾏转换，反之则不⾏。<br>（小房子可以转向大房子~）<br>byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double</li><li>强制类型转换<br>Java ⽆法⾃动转换的数据类型，开发者可以通过强制⼿段进⾏转换。<br>⼀般来讲强制类型转换可能会造成精度损失。  <pre><code>double num = 10.0;int num2 = (int)num;</code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3></li><li>赋值运算符<br>数据类型 变量名 = 数值/变量;<pre><code>//1、创建变量⽤来记录张三的体重double weight1 = 70.5;//2、创建变量表示李四的体重double weight2 = 60.5;System.out.println(&quot;交换之前：张三的体重是&quot;+weight1+&quot;,李四的体重是&quot;+weight2);System.out.println(&quot;进⾏交换&quot;);double temp = weight1;weight1 = weight2;weight2 = temp;System.out.println(&quot;交换之后：张三的体重是&quot;+weight1+&quot;,李四的体重是&quot;+weight2);</code></pre></li><li>算术运算符</li></ul><ol><li>基本算术运算符  </li></ol><p>+、-、*、/、%、++、–<br>变量1 + 变量2<br>变量1 - 变量2<br>变量1 * 变量2<br>变量1 / 变量2<br>变量1 % 变量2<br>变量++、++变量<br>变量–、–变量<br>变量++：先操作，再运算。<br>++变量：先运算，再操作。  </p><ol start="2"><li>复合算术运算符  </li></ol><p>+=、-=、<em>=、/=、%=<br>变量1 += 变量2：</em>先求出变量1和变量2之和，再把计算结果赋值给变量1，变量1 = 变量1 +变量2</p><ul><li>关系运算符<br>==、!=、&gt;、&lt;、&gt;=、&lt;=  </li><li>逻辑运算符<br>逻辑运算符只能⽤于 boolean 类型的数据运算，判断 boolean 数据之间的逻辑关系，与、或、⾮。<br>&amp;（与）、｜（或）、!（⾮）、&amp;&amp;（短路与）、||（短路或）<br>参与逻辑运算符的变量都是 boolean 的<br>变量1 &amp; 变量2：只有当变量 1 和变量 2 都为 true，结果为 true，否则为 false。<br>变量1 ｜ 变量2：变量 1 和变量 2 只要有⼀个为 true，结果为 true，否则为 false。<br>!变量1：若变量 1 为 true，结果为 false，若变量 1 为 false，结果为 true。<br>变量1 &amp;&amp; 变量2：只有当变量 1 和变量 2 都为 true，结果为 true，否则为 false。<br>变量1 || 变量2：变量 1 和变量 2 只要有⼀个为 true，结果为 true，否则为 false。  <pre><code>int num1 = 10;int num2 = 11;System.out.println((++num1==num2)||(num1++==num2));System.out.println(num1);int num1 = 10;int num2 = 11;System.out.println((++num1==num2)|(num1++==num2));System.out.println(num1);int num1 = 10;int num2 = 11;System.out.println((num1++==num2)&amp;(++num1==num2));System.out.println(num1);int num1 = 10;int num2 = 11;System.out.println((num1++==num2)&amp;&amp;(++num1==num2));System.out.println(num1);</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Java 02</title>
      <link href="/posts/14655.html"/>
      <url>/posts/14655.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://www.jinqiaojob.com/uploads/allimg/200116/1-200116214R1611.jpg" alt="Java02"></p><h3 id="安装-Java-环境"><a href="#安装-Java-环境" class="headerlink" title="安装 Java 环境"></a>安装 Java 环境</h3><ul><li>编写 Java 代码  </li><li>编译 Java 代码，成为字节码⽂件 16 进制<br>javac ⽂件名（带后缀）</li><li>让 JVM 执⾏字节码⽂件，运⾏程序<br>java ⽂件名（不带后缀）</li></ul><p>IDE：集成开发环境<br>Eclipse、IDEA  </p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>Java 语⾔预先定义好的，有指定意义的标识符，组成程序的基本元素。<br>1、abstract 表示抽象<br>2、boolean 基本数据类型<br>3、break 跳出循环<br>4、byte 基本数据类型<br>5、case 与 switch 搭配使⽤<br>6、catch 与 try 搭配使⽤，表示捕获异常<br>7、char 基本数据类型<br>8、class 表示⼀个类<br>9、continue 跳出循环<br>10、do 与 while 搭配使⽤，表示循环<br>11、double 基本数据类型<br>12、else 与 if 搭配，流程控制<br>13、enum 枚举类型<br>14、extends 继承<br>15、final 修饰常量<br>16、float 基本数据类型<br>17、if 流程控制<br>18、implements 实现接⼝<br>19、import 引⼊某个类<br>20、int 基本数据类型<br>21、interface 表示接⼝<br>22、long 基本数据类型<br>23、native 表示本地⽅法<br>24、new 创建对象<br>25、package 表示包<br>26、private 私有<br>27、public 共有<br>28、return 返回值<br>29、short 基本数据类型<br>30、static 表示静态<br>31、super 表示⽗类<br>32、switch 与 case 搭配使⽤<br>33、synchronized 线程同步<br>34、this 表示当前实例<br>35、throw 抛出异常<br>36、throws ⽅法中主动抛出异常<br>37、try 与 catch 搭配使⽤<br>38、void 表示⽅法没有返回值<br>39、volatile 保证线程读取到最新值<br>40、while 表示循环  </p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>数据类型  </li><li>变量名  </li><li>变量值  <h3 id="使⽤变量"><a href="#使⽤变量" class="headerlink" title="使⽤变量"></a>使⽤变量</h3>1、声明变量的数据类型和变量名（包含数字、字⺟、下划线、$，不能包含空格、运算符，不能⽤关键<br>字命名，不能以数字开头），⼤⼩写可以混⽤，⾸单词应该⼩写，后续单词的⾸字⺟⼤写。<br>userId、studentName （驼峰式命名法）</li></ul><p>2、给内存空间赋值，该值就是变量值。  </p><h3 id="Java-的数据类型"><a href="#Java-的数据类型" class="headerlink" title="Java 的数据类型"></a>Java 的数据类型</h3><ul><li>基本数据类型<br>byte、int、short、long、float、double、char、boolean  </li></ul><p><strong>数值类型（整数、⼩数）</strong><br>byte 1 个字节 (8位)<br>int 4 个字节（32位）<br>short 2 个字节（16位）<br>long 8 个字节（64位）<br>float 4 个字节（32位） 单精度浮点型<br>double 8 个字节（64位）双精度浮点型<br><strong>⾮数值类型（⽂本）</strong><br>char 字符 2 个字节（16位）<br>boolean 1/8 个字节、判断逻辑是否成⽴ true 1/false 0 </p><ul><li>引⽤数据类型  </li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Java 01</title>
      <link href="/posts/14463.html"/>
      <url>/posts/14463.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://www.jinqiaojob.com/uploads/allimg/200116/1-200116214R1611.jpg" alt="Java01"></p><h3 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h3><ol><li>跨平台</li><li>⾯向对象编程语⾔</li><li>分布式计算<h3 id="Java-的运⾏机制y"><a href="#Java-的运⾏机制y" class="headerlink" title="Java 的运⾏机制y"></a>Java 的运⾏机制y</h3></li></ol><ul><li>编程 Java 程序</li><li>编译 Java ⽂件</li><li>JVM 读取字节码⽂件运⾏程序<h3 id="Java-的三⼤体系"><a href="#Java-的三⼤体系" class="headerlink" title="Java 的三⼤体系"></a>Java 的三⼤体系</h3></li><li>Java SE(J2SE)</li><li>Java ME(J2ME)</li><li>Java EE(J2EE)<h3 id="配置-Java-环境"><a href="#配置-Java-环境" class="headerlink" title="配置 Java 环境"></a>配置 Java 环境</h3>JRE、JDK  </li></ul><p>JRE：Java Runtime Environment Java 运⾏环境</p><p>JDK：Java Devlopment Kit Java 开发⼯具包</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ul><li>编译<br><code>javac HelloWorld.java</code></li><li>运⾏<br><code>java HelloWorld</code></li></ul><p>Java IDE  </p><p>NetBeans、Eclipse、IDEA</p><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><ul><li>强制性代码规范，必须执⾏的</li></ul><p>1、Java 程序的⽂件名与类名必须⼀致，若不⼀致，⽆法通过编译。<br>2、main ⽅法是程序的⼊⼝，⽅法的定义必须严格按照格式书写。<br>3、类是组织 Java 代码结构的，类中的⽅法是执⾏具体业务的。  </p><ul><li>⾮强制性代码规范，建议按照此⽅式编写代码<br>1、⼀⾏只写⼀条语句<br>2、在 1 的基础上，还要注意代码缩进。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能家具（系统测试报告）</title>
      <link href="/posts/5471.html"/>
      <url>/posts/5471.html</url>
      
        <content type="html"><![CDATA[<h3 id="智能家具（系统测试报告）"><a href="#智能家具（系统测试报告）" class="headerlink" title="智能家具（系统测试报告）"></a>智能家具（系统测试报告）</h3><hr><h2 id="1-1编写目的"><a href="#1-1编写目的" class="headerlink" title="1.1编写目的"></a>1.1编写目的</h2><p>编写该测试总结报告主要有以下几个目的<br>1.通过对测试结果的分析，得到对软件硬件质量的评价;<br>2.评估测试，测试执行和测试计划是否符合要求;<br>3.分析系统存在的缺陷，为修复和预防bug提供建议。</p><hr><h2 id="1-2用户群"><a href="#1-2用户群" class="headerlink" title="1.2用户群"></a>1.2用户群</h2><p>主要测试:<br>  <strong>杜荣</strong>（项目管理人员）<br>  <strong>张帅</strong>（项目测试负责人）</p><p>相关测试人员:<br><strong>涂同乐</strong>、<strong>杨一民</strong></p><hr><h2 id="1-3定义"><a href="#1-3定义" class="headerlink" title="1.3定义"></a>1.3定义</h2><p>   严重bug:出现以下缺陷，测试定义为严重bug。</p><blockquote><ol><li>系统无响应，处于死机状态，需要其他人工修复系统才可复原。</li><li>点击某个菜单后出现“此页无法显示”或者返回异常错误。</li><li>进行某个操作 (增加、修改、删除等)后，出现“此页无法显示”或者返<br>回异常错误。</li><li>当对必填字段进 行校验时，未输入必输字段，出现“此页无法显示”或者<br>返回异常错误。</li><li>智能家具出现不受人的操控，出现自己运行等情况</li></ol></blockquote><hr><h2 id="1-4-测试环境"><a href="#1-4-测试环境" class="headerlink" title="1.4 测试环境"></a>1.4 测试环境</h2><h6 id="1-4-1测试用例"><a href="#1-4-1测试用例" class="headerlink" title="1.4.1测试用例"></a>1.4.1测试用例</h6><p>家庭成员登录后，通过系统的身份验证即可进行控制灯光操作。反之，不能进行控制灯光操作。只能保证一个用户登录服务器–也就是说第- 一个人登录后，后面的人要登录进去是不被允许的，一般在session中存一个useid和guid,并在application里存放- -个guid。<br><strong>另:只能输入三次，若三次都错误，只能关闭再重新启动登录界面</strong></p><table><thead><tr><th>功能A描述</th><th align="center">管理员和普通用户的登录</th></tr></thead><tbody><tr><td>用例目的</td><td align="center">检查系统管理员用户和普通用户是否能正常登录</td></tr><tr><td>用例内容</td><td align="center">对管理员用户和普通用户的登录————测试</td></tr><tr><td>测试步骤</td><td align="center">按照下面的测试步骤</td></tr><tr><td>前提条件</td><td align="center">系统和通信正常情况下，正确注册了数个管理员和普通用户</td></tr></tbody></table><hr><table><thead><tr><th>测试步骤</th><th align="center">测试数据</th><th align="right">预期结果</th></tr></thead><tbody><tr><td>1:进入登录页面，在用户名中输入相应的用户名，在密码框中输入对应的密码:在后下拉框中选择对应的类型，点击登录按钮</td><td align="center">2:直接进入相对应的可操作的主窗口A:用户名输入为空B:用户名输入错误C:输入普通用户选择管理员类型D:输入管理员用户选择普通类型E:不选择输入类型F:输入没有注册的用户G:将密码输入错误H:密码输入错误大于三次I:密码输入为空</td><td align="right">1A:弹出提示输入用户名的窗口。1B;弹出提示输入用户名错误，请重新输入的窗口。1C:类型选择错误。请重新输入。1D:类型选择错误。请重新输入。1E:弹出提示请选择类型窗口。1F:弹出提示输入用户名错误，请重新输入的窗口。1G:密码输入错误。请重新输入。1H:输入请重新登录的窗口。</td></tr></tbody></table><blockquote><p>在存储器中，用户登录需要系统身份验证输入账号密码，在数据库中建立一个注册表，把家庭成员中每-一个人的账号(如手机号)和密码(如出生年月)导入进去，登录时输入用户账号密码，并与注册表中的数据进行校对，若有就可以登录，没有就验证失败。管理员登陆之后的权限是可以修改密码及登陆状况。</p></blockquote><hr><h2 id="1-5-测试结果"><a href="#1-5-测试结果" class="headerlink" title="1.5.测试结果"></a>1.5.测试结果</h2><p>测试发现的bug主要集中在登陆和状态查看阶段，属于一般性的缺陷，但是测<br>试的时候，出现了几个严重级别的bug，出现严重级别的bug主要表现在以下几<br>个方面。<br>1.添加数据代码重复后，出现的找不到页面的错误;<br>2.未考虑非语种代码的情况;<br>3.数据库设计未考虑系统管理员角色，导致用系统管理员进行操作的时候出现.<br>找不到页面错误;<br>4.权限控制的高与低异常。</p><hr><h2 id="1-6-测试结论"><a href="#1-6-测试结论" class="headerlink" title="1.6 测试结论"></a>1.6 测试结论</h2><p>  功能性</p><blockquote><p>智能家具系统正确实现了通过数据字典管理基础数据的功能，具体实现的功能有智能照明、一件情景控制、智能门锁、智能门窗；在环境检测方面实现了传感器检测家庭漏水、煤气泄漏、烟雾感应等隐患，数据能实时同步到业主手机上；安全警报系统中有屋内设有门磁、玻璃破碎报警器、声光警笛、红外幕帘、报警主机等，一旦智能门锁被非法的方式打开时或者屋内出现异常情况，系统会自动向用户手机报警。提醒用户可能存在安全隐患，可及时向物业或者警察报警。影音娱乐：通过智能遥控器、红外线转发器、背景音乐播放等设备连接控制家庭影音设备，同时联动调节灯光、关闭窗帘，实现舒适便捷的影音娱乐环境。实现了将权限控制细化到菜单按钮的功能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> smart home </category>
          
      </categories>
      
      
        <tags>
            
            <tag> smart home </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boots实战集合</title>
      <link href="/posts/43914.html"/>
      <url>/posts/43914.html</url>
      
        <content type="html"><![CDATA[<h3 id="本项目为-《Spring-Boot实战合集》的系列文章，代码已开源，并持续保持更新。如果您觉得该项目对您有用，欢迎点击右上方的-Star按钮支持一波！！"><a href="#本项目为-《Spring-Boot实战合集》的系列文章，代码已开源，并持续保持更新。如果您觉得该项目对您有用，欢迎点击右上方的-Star按钮支持一波！！" class="headerlink" title="本项目为 《Spring Boot实战合集》的系列文章，代码已开源，并持续保持更新。如果您觉得该项目对您有用，欢迎点击右上方的 Star按钮支持一波！！"></a>本项目为 《Spring Boot实战合集》的系列文章，代码已开源，并持续保持更新。如果您觉得该项目对您有用，欢迎点击右上方的 Star按钮支持一波！！</h3><ul><li>个人博客：<a href="https://www.codesheep.cn" target="_blank" rel="noopener">https://www.codesheep.cn</a></li><li>GitHub：<a href="https://github.com/hansonwang99" target="_blank" rel="noopener">https://github.com/hansonwang99</a></li></ul><p>另外所有内容都在我的个人微信公众号 <strong>CodeSheep</strong> 最先推出，大家可以关注一下，可 <strong>长按</strong> 或 <strong>扫描</strong> 下面的 <strong>小心心</strong> 来获取更多 <strong>务实、能看懂、可复现的</strong> 原创文。除此之外 <strong>提问/进群交流</strong> 也可以扫码进行！！！</p><p><img src="https://www.codesheep.cn/css/images/codesheep_logo_heart.jpg" alt="CodeSheep · 程序羊"></p><p><a href="https://996.icu/#/en_US" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/link-996.icu-%23FF4D5B.svg" alt="Badge"></a><br><a href="https://github.com/996icu/996.ICU/blob/master/LICENSE" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/license-Anti%20996-blue.svg" alt="LICENSE"></a></p><p><a href="https://join.slack.com/t/996icu/shared_invite/enQtNTg4MjA3MzA1MzgxLWQyYzM5M2IyZmIyMTVjMzU5NTE5MGI5Y2Y2YjgwMmJiMWMxMWMzNGU3NDJmOTdhNmRlYjJlNjk5ZWZhNWIwZGM" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/slack-996icu-green.svg" alt="Slack"></a></p><hr><hr><h1 id="数据库-缓存相关"><a href="#数据库-缓存相关" class="headerlink" title="数据库/缓存相关"></a>数据库/缓存相关</h1><ul><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springbt_guava_cache" target="_blank" rel="noopener">Guava Cache本地缓存在 Spring Boot应用中的实践</a></p></li><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springbt_evcache" target="_blank" rel="noopener">EVCache缓存在 Spring Boot中的实战</a></p></li><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springbt_ehcache" target="_blank" rel="noopener">Spring Boot应用缓存实践之：Ehcache加持</a></p></li><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springbt_mybatis_sqlserver" target="_blank" rel="noopener">Spring Boot集成 MyBatis和 SQL Server实践</a></p></li><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springboot_es_demo" target="_blank" rel="noopener">Elasticsearch搜索引擎在Spring Boot中的实践</a></p></li><li><p><a href="https://www.codesheep.cn/2019/02/28/elasticsearch-spring-boot-starter/" target="_blank" rel="noopener">自制一个 elasticsearch-spring-boot-starter</a></p></li><li><p><a href="https://www.codesheep.cn/2019/02/14/mybatis-generator/" target="_blank" rel="noopener">Spring Boot项目利用MyBatis Generator进行数据层代码自动生成</a></p></li><li><p><a href="https://www.codesheep.cn/2019/04/12/springbt-mybatis-plus/" target="_blank" rel="noopener">Mybatis-Plus 真好用（乡村爱情加持）</a></p></li></ul><hr><h1 id="日志相关"><a href="#日志相关" class="headerlink" title="日志相关"></a>日志相关</h1><ul><li><a href="http://www.codesheep.cn/2018/03/29/Boot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">Spring Boot日志框架实践</a></li></ul><hr><h1 id="应用监控相关"><a href="#应用监控相关" class="headerlink" title="应用监控相关"></a>应用监控相关</h1><ul><li><p><a href="https://www.codesheep.cn/2019/01/17/springbt-btrace/" target="_blank" rel="noopener">利用神器 BTrace 追踪线上 Spring Boot应用运行时信息</a></p></li><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springbt_admin_server" target="_blank" rel="noopener">Spring Boot应用监控实战</a></p></li><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/spring_boot_admin2.0_demo" target="_blank" rel="noopener">Spring Boot Admin 2.0开箱体验</a></p></li></ul><hr><h1 id="内部机制相关"><a href="#内部机制相关" class="headerlink" title="内部机制相关"></a>内部机制相关</h1><ul><li><p><a href="http://www.codesheep.cn/2018/07/30/at-SpringBootApplication-zhujie/" target="_blank" rel="noopener">SpringBoot 中 @SpringBootApplication注解背后的三体结构探秘</a></p></li><li><p><a href="http://www.codesheep.cn/2018/09/04/springboot-startup-process/" target="_blank" rel="noopener">SpringBoot 应用程序启动过程探秘</a></p></li><li><p><a href="https://www.codesheep.cn/2019/01/24/springbt-starter/" target="_blank" rel="noopener">如何自制一个Spring Boot Starter并推送到远端公服</a></p></li></ul><hr><h1 id="认证和权限相关"><a href="#认证和权限相关" class="headerlink" title="认证和权限相关"></a>认证和权限相关</h1><ul><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springbt_security_jwt" target="_blank" rel="noopener">基于 Spring Security和 JWT的权限系统设计</a></p></li><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springbt_sso_jwt" target="_blank" rel="noopener">基于Spring Security Oauth2的SSO单点登录+JWT权限控制实践</a></p></li></ul><hr><h1 id="实战经验相关"><a href="#实战经验相关" class="headerlink" title="实战经验相关"></a>实战经验相关</h1><ul><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springbt_uid_generator" target="_blank" rel="noopener">Spring Boot工程集成全局唯一ID生成器 UidGenerator</a></p></li><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springbt_vesta" target="_blank" rel="noopener">Spring Boot 工程集成全局唯一ID生成器 Vesta</a></p></li><li><p><a href="http://www.codesheep.cn/2018/04/09/SpringBoot%E4%BC%98%E9%9B%85%E7%BC%96%E7%A0%81%E4%B9%8B%EF%BC%9ALombok%E5%8A%A0%E6%8C%81/" target="_blank" rel="noopener">Spring Boot优雅编码之：Lombok加持</a></p></li><li><p><a href="http://www.codesheep.cn/2018/04/12/SpringBoot%E5%BA%94%E7%94%A8Docker%E5%8C%96/" target="_blank" rel="noopener">Spring Boot应用 Docker化</a></p></li><li><p><a href="http://www.codesheep.cn/2018/06/23/SpringBoot%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8A%A0%E6%8C%81/" target="_blank" rel="noopener">Spring Boot热部署加持</a></p></li><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/springbt_watermark" target="_blank" rel="noopener">基于Spring Boot实现图片上传/加水印一把梭操作</a></p></li><li><p><a href="http://www.codesheep.cn/2018/06/10/%E4%BB%8ESpringBoot%E5%88%B0SpringMVC/" target="_blank" rel="noopener">从Spring Boot到 SpringMVC</a></p></li><li><p><a href="http://www.codesheep.cn/2018/11/01/springbt-hanlp/" target="_blank" rel="noopener">自然语言处理工具包 HanLP在 Spring Boot中的应用</a></p></li><li><p><a href="http://www.codesheep.cn/2018/06/05/SpringBoot%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%BA%8E%E5%A4%96%E7%BD%AETomcat%E5%AE%B9%E5%99%A8/" target="_blank" rel="noopener">Spring Boot应用部署于外置Tomcat容器</a></p></li><li><p><a href="https://github.com/hansonwang99/Spring-Boot-In-Action/tree/master/kotlin_with_springbt" target="_blank" rel="noopener">初探 Kotlin + Spring Boot联合编程</a></p></li></ul><hr><h1 id="【持续更新中……】"><a href="#【持续更新中……】" class="headerlink" title="【持续更新中……】"></a>【持续更新中……】</h1>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片测试520</title>
      <link href="/posts/22440.html"/>
      <url>/posts/22440.html</url>
      
        <content type="html"><![CDATA[<h3 id="图片测试1"><a href="#图片测试1" class="headerlink" title="图片测试1"></a>图片测试1</h3><pre><code>    ![(可以写关于图片的描述)](/images/1.png)    ![](1.png)</code></pre><hr><h3 id="图片测试2"><a href="#图片测试2" class="headerlink" title="图片测试2"></a>图片测试2</h3><pre><code>    ![](图片测试520/1.png)</code></pre><hr><pre><code>  ![](1.png)  ![](1.png)  ![](3.jpg)</code></pre>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天在补充一点东西吧</title>
      <link href="/posts/12764.html"/>
      <url>/posts/12764.html</url>
      
        <content type="html"><![CDATA[<p>###<br>更新一点个人信息</p><hr><p>##<br>先来整个头像试试</p><hr><pre><code>      886</code></pre><p>–</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>今天5月19日，学习我的blog</title>
      <link href="/posts/731.html"/>
      <url>/posts/731.html</url>
      
        <content type="html"><![CDATA[<p> GIT学习笔记</p><p>#I. 初次使用之前进行的准备</p><p> 初次使用之前进行的准备<br>这些都是为了便于确认你的身份</p><p>1 &gt; git config –global user.email “<a href="mailto:you@example.com">you@example.com</a>“          #你的邮箱地址<br>2 &gt; git config –global user.name “Your Name”                 #你的名字</p><p>#II. 克隆一个仓库</p><p>1 &gt; git clone “<a href="https://github.com/username/repository.git&quot;" target="_blank" rel="noopener">https://github.com/username/repository.git&quot;</a>    #你的仓库地址</p><p>#III. 确认并提交一个仓库中的改动</p><p>1&gt; git add –all                                             # –all 添加所有改动<br>2&gt; git commit -m “Commit Message”                            #确认提交改动时的备注和提交信息<br>3&gt; git push -u origin master                                 # origin 原始仓库, master 默认分支</p><p>##<br> 1 .这个是我的测试内容，欢迎访问我的blog</p><pre><code>   https://zhangshuai599.github.io/</code></pre><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/posts/15650.html"/>
      <url>/posts/15650.html</url>
      
        <content type="html"><![CDATA[<p>##第一张</p><p>内容</p><hr><p>##第二章</p><p>内容</p><hr><p>##参考文献</p><p><a href="http://www.codesheep.cn" target="_blank" rel="noopener">www.codesheep.cn</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
